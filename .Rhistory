dist = poisson, link = "logit")
fit.pscl = zeroinfl(Y ~ share_women_executive + ciep, data = KK20,
dist = "poisson", link = "logit")
summary(fit.pscl)
fit.pscl = zeroinfl(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority + maxdur
, data = KK20,
dist = "poisson", link = "logit")
summary(fit.pscl)
exp(0.04)
fit.pscl = zeroinfl(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority,
data = KK20, dist = "poisson", link = "logit")
summary(fit.pscl)
fit.pscl = zeroinfl(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority | share_women_executive,
data = KK20, dist = "poisson", link = "logit")
summary(fit.pscl)
X = model.matrix(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority)
X = model.matrix(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority, data = KK20)
X
X[,1:2]
KK20$Y
na.omit(X)
zip.dat = list(Y = KK20$Y,
X = X,
Y = X[,1:2],
n = nrow(X),
p = ncol(X),
m = 2)
fit.stan = stan("ZIP.stan", data = zip.dat,
cores = 4)
fit.stan = stan("ZIP.stan", data = zip.dat,
cores = 4)
fit.stan = stan("ZIP.stan", data = zip.dat,
cores = 4)
zip.dat = list(Y = KK20$Y,
X = X,
Z = X[,1:2],
n = nrow(X),
p = ncol(X),
m = 2)
fit.stan = stan("ZIP.stan", data = zip.dat,
cores = 4)
save.image("~/Desktop/temp.RData")
fit.stan
colnames(X)
# test ZIP
n = 1000
# test ZIP
n = 100
p = 2
X = matrix(rnorm(n*p), ncol = p)
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 0.4)
nu = exp(X*beta)
nu = exp(X%*%beta)
nu = vector(exp(X%*%beta))
nu = as.numeric(exp(X%*%beta))
gamma = c(0, 0.5)
logit(2)
# test ZIP
logit_inv = function(x) 1 / (1+exp(-x))
logit_inv(2)
pi = as.numeric(logit_inv(Z%*%gamma))
pi
hist(pi)
gamma = c(0, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,p))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 0.4)
nu = as.numeric(exp(X%*%beta))
gamma = c(0, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros
beta = c(0.2, 3)
# test ZIP
logit_inv = function(x) 1 / (1+exp(-x))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 3)
nu = as.numeric(exp(X%*%beta))
gamma = c(0, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
Y
hist(Y)
# test ZIP
logit_inv = function(x) 1 / (1+exp(-x))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 0.6)
nu = as.numeric(exp(X%*%beta))
gamma = c(0, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
hist(pi)
gamma = c(-1, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
# test ZIP
logit_inv = function(x) 1 / (1+exp(-x))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 0.6)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
beta = c(0.2, 1.1)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
beta = c(0.2, 1.9)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
logit_inv = function(x) 1 / (1+exp(-x))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 1.5)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit = zeroinfl(y ~ x | z, data = df)
summary(fit)
library(here)
library(readstata13)
library(tidyverse)
library(rstan)
library(survival)
library(here)
library(readstata13)
library(tidyverse)
library(rstan)
library(survival)
fit = stan("ZIP.stan", data = list(n = n, p = 2, m = 2,
X = X, Z = Z, Y = Y),
cores = 4)
fit = stan("ZIP.stan", data = list(n = n, p = 2, m = 2,
X = X, Z = Z, Y = Y),
cores = 4)
library(here)
library(readstata13)
library(tidyverse)
library(rstan)
library(survival)
library(pscl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# test ZIP
logit_inv = function(x) 1 / (1+exp(-x))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(0.2, 1.5)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit.zinf = zeroinfl(y ~ x | z, data = df)
summary(fit.zinf)
y_nonzero = Y[Y!=0]
n_nonzero = length(y_nonzero)
n_zero = n - n_nonzero
X_nonzero = X[Y!=0,]
X_zero = X[Y==0,]
Z_nonzero = Z[Y!=0,]
Z_zero = Z[Y==0,]
zip2dat = list(n = n, p = 2, m = 2,
X_nonzero = X_nonzero,
X_zero = X_zero,
Z_nonzero = Z_nonzero,
Z_zero = Z_zero,
y_nonzero = y_nonzero,
n_nonzero = n_nonzero,
n_zero = n_zero)
fit = stan("ZIP2.stan", data = zip2dat,
iter = 10000, warmup = 9000)
fit = stan("ZIP2.stan", data = zip2dat,
iter = 12000, warmup = 9000)
summary(fit)
fit
zeros = sapply(pi, function(p) rbinom(1,1,p))
Y = zeros*rpois(n, nu)
hist(Y)
pi
rpois(n, nu)
nu
beta = c(4, 0.5)
nu = as.numeric(exp(X%*%beta))
gamma = c(-1.5, 0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,1-p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit.zinf = zeroinfl(y ~ x | z, data = df)
summary(fit.zinf)
y_nonzero = Y[Y!=0]
n_nonzero = length(y_nonzero)
n_zero = n - n_nonzero
X_nonzero = X[Y!=0,]
X_zero = X[Y==0,]
Z_nonzero = Z[Y!=0,]
Z_zero = Z[Y==0,]
zip2dat = list(n = n, p = 2, m = 2,
X_nonzero = X_nonzero,
X_zero = X_zero,
Z_nonzero = Z_nonzero,
Z_zero = Z_zero,
y_nonzero = y_nonzero,
n_nonzero = n_nonzero,
n_zero = n_zero)
fit = stan("ZIP2.stan", data = zip2dat,
iter = 12000, warmup = 9000)
fit
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit
gamma = c(1.5, -0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit.zinf = zeroinfl(y ~ x | z, data = df)
summary(fit.zinf)
y_nonzero = Y[Y!=0]
n_nonzero = length(y_nonzero)
n_zero = n - n_nonzero
X_nonzero = X[Y!=0,]
X_zero = X[Y==0,]
Z_nonzero = Z[Y!=0,]
Z_zero = Z[Y==0,]
zip2dat = list(n = n, p = 2, m = 2,
X_nonzero = X_nonzero,
X_zero = X_zero,
Z_nonzero = Z_nonzero,
Z_zero = Z_zero,
y_nonzero = y_nonzero,
n_nonzero = n_nonzero,
n_zero = n_zero)
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit
exp(-9)
exp(-0.02)
fit = stan("ZIP.stan", data = list(n = n, p = 2, m = 2,
X = X, Z = Z, Y = Y))
zip2dat = list(n = n, p = 2, m = 2,
X_nonzero = X_nonzero,
X_zero = X_zero,
Z_nonzero = Z_nonzero,
Z_zero = Z_zero,
y_nonzero = y_nonzero,
n_nonzero = n_nonzero,
n_zero = n_zero)
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit
fit = stan("ZIP2.stan", data = zip2dat,
iter = 2000, #warmup = 9000,
pars = c("beta", "gamma"))
fit
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(4, 0.5)
nu = as.numeric(exp(X%*%beta))
gamma = c(1.5, -0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
logit_inv = function(x) 1 / (1+exp(-x))
pi = as.numeric(logit_inv(Z%*%gamma))
hist(pi)
zeros = sapply(pi, function(p) rbinom(1,1,p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit.zinf = zeroinfl(y ~ x | z, data = df)
# Proof of concept stan ZIP regression
library(here)
library(tidyverse)
library(rstan)
library(pscl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
logit_inv = function(x) 1 / (1+exp(-x))
# data
n = 1000
p = 1
X = cbind(1, matrix(rnorm(n*p), ncol = p))
Z = cbind(1, matrix(rnorm(n*p), ncol = p))
beta = c(4, 0.5)
nu = as.numeric(exp(X%*%beta))
gamma = c(1.5, -0.9)
pi = as.numeric(logit_inv(Z%*%gamma))
zeros = sapply(pi, function(p) rbinom(1,1,p))
Y = zeros*rpois(n, nu)
hist(Y)
df = data.frame(x = X[,2],
z = Z[,2],
y = Y)
fit.zinf = zeroinfl(y ~ x | z, data = df)
summary(fit.zinf)
## Vectorized Stan
zip.standat = list(n = n, p = 2, m = 2,
y_nonzero = Y[Y!=0],
n_nonzero = sum(Y!=0),
n_zero = sum(Y == 0),
X_nonzero = X[Y!=0,],
X_zero = X[Y==0,],
Z_nonzero = Z[Y!=0,],
Z_zero = Z[Y==0,])
fit.stan = stan("ZIP2.stan", data = zip.standat,
pars = c("beta", "gamma"))
fit.stan = stan(here("stanmodels", "ZIP2.stan", data = zip.standat,
fit.stan = stan(here("stanmodels", "ZIP2.stan"), data = zip.standat,
pars = c("beta", "gamma"))
summary(fit.stan)
fit.stan
summary(fit.zinf)
library(here)
library(readstata13)
library(tidyverse)
library(dplyr)
library(readxl)
library(rstan)
library(bayesplot)
library(shinystan)
library(foreach)
library(doParallel)
library(survival)
#options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
set.seed(149)
# Data
# https://www.tandfonline.com/doi/full/10.1080/13501763.2020.1773905
fem = read.dta13(here('data/Krauss2020_WomenCabinet.dta'))
# https://erdda.org/erd/data-archive/
erd = read_xls(here('data/Andersson2014_ERD.xls'))
erd = erd %>% mutate(v002e,
'start_date' = v004e,
'end_date' = v005e)
library(here)
library(readstata13)
library(tidyverse)
library(rstan)
library(survival)
## Data ====
KK20 = read.dta13(here('data/Krauss2020_WomenCabinet.dta'))
KK20$decade = as.factor(KK20$decade)
KK20$ciep = as.factor(KK20$ciep)
KK20$maxdur = scale(KK20$maxdur)
# Stan Data
event = KK20$failure
T_event = KK20$duration[event]
T_censor = KK20$duration[!event]
X = model.matrix(~ -1 + share_women_executive + pref + enpp +
decade + ciep + minority + maxdur,
data = KK20)
#X = model.matrix(~ -1 + minority,
#                 data = KK20)
p = ncol(X)
X_event = matrix(X[event,], ncol = p)
X_censor = matrix(X[!event,], ncol = p)
n_event = nrow(X_event)
n_censor = nrow(X_censor)
KK20.stan_vector = list(n_event = n_event, n_censor = n_censor, p = p,
X_event = X_event, X_censor = X_censor,
T_event = T_event, T_censor = T_censor)
library(here)
library(readstata13)
library(tidyverse)
library(rstan)
library(pscl)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
## Data ====
KK20 = read.dta13(here('data/Krauss2020_WomenCabinet.dta'))
KK20$decade = as.factor(KK20$decade)
KK20$ciep = as.factor(KK20$ciep)
KK20$Y = (KK20$maxdur - KK20$duration)
KK20$Y[KK20$failure == 0] = 0
fit.pscl = zeroinfl(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority,
data = KK20, dist = "poisson", link = "logit")
summary(fit.pscl)
X = model.matrix(Y ~ share_women_executive + pref + enpp +
decade + ciep + minority, data = KK20)
Z = X
X
Y = KK20$Y
## Vectorized Stan
zip.standat = list(n = nrow(X), p = ncol(X), m = ncol(Z),
y_nonzero = Y[Y!=0],
n_nonzero = sum(Y!=0),
n_zero = sum(Y == 0),
X_nonzero = X[Y!=0,],
X_zero = X[Y==0,],
Z_nonzero = Z[Y!=0,],
Z_zero = Z[Y==0,])
fit.stan = stan(here("stanmodels", "ZIP2.stan"), data = zip.standat,
pars = c("beta", "gamma"))
fit.stan
coef(fit.pscl)
pairs(fit.stan)
?pairs
fit.stan
pairs(fit.stan)
source('~/Dropbox/ETH_S21/BayesStat/BayesStat_FinalProject/scripts/CabinetSurvival_ZIP.R')
# Data
# https://www.tandfonline.com/doi/full/10.1080/13501763.2020.1773905
fem = read.dta13(here('data/Krauss2020_WomenCabinet.dta'))
library(here)
library(readstata13)
library(tidyverse)
library(dplyr)
library(readxl)
library(rstan)
library(bayesplot)
library(shinystan)
library(foreach)
library(doParallel)
library(survival)
#options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
set.seed(149)
# Data
# https://www.tandfonline.com/doi/full/10.1080/13501763.2020.1773905
fem = read.dta13(here('data/Krauss2020_WomenCabinet.dta'))
fem$country_name_short
unique(fem$country_name_short)
